{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","pages/ChatPage.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListener","stopMessagesListener","Messages","AddMessageForm","messageAnchorRef","useRef","messages","useState","autoScroll","setAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","React","memo","alt","src","photo","maxWidth","userName","setMessage","onKeyPress","key","click","onChange","resize","width","disabled","onClick","sendMessage","ChatPage","props"],"mappings":"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","file":"static/js/9.ff0f2c80.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    sendMessage,\r\n    startMessagesListener,\r\n    stopMessagesListener,\r\n} from \"../redux/chat-reducer\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\ntype ChatMessageType = {\r\n    message: string;\r\n    photo: string;\r\n    userId: number;\r\n    userName: string;\r\n};\r\n\r\nconst ChatPage: React.FC = (props) => {\r\n    return (\r\n        <>\r\n            <Chat />\r\n        </>\r\n    );\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n    useEffect(() => {\r\n        dispatch(startMessagesListener());\r\n        return () => {\r\n            dispatch(stopMessagesListener());\r\n        };\r\n    }, [dispatch]);\r\n    return (\r\n        <div>\r\n            {status === \"error\" && (\r\n                <div>Some error occured. Please refresh page</div>\r\n            )}\r\n            <>\r\n                <Messages />\r\n                <AddMessageForm />\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Messages: React.FC = () => {\r\n    const messageAnchorRef = useRef<HTMLDivElement>(null);\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n    const [autoScroll, setAutoScroll] = useState(true);\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget;\r\n        if (\r\n            Math.abs(\r\n                element.scrollHeight - element.scrollTop - element.clientHeight\r\n            ) < 50\r\n        ) {\r\n            !autoScroll && setAutoScroll(true);\r\n        } else {\r\n            autoScroll && setAutoScroll(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        messageAnchorRef.current?.scrollIntoView();\r\n    }, []);\r\n    useEffect(() => {\r\n        if (autoScroll) {\r\n            messageAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }, [messages, autoScroll]);\r\n    return (\r\n        <div\r\n            style={{ height: \"700px\", overflowY: \"auto\" }}\r\n            onScroll={scrollHandler}\r\n        >\r\n            {messages.map((m) => (\r\n                <Message message={m} key={m.id} />\r\n            ))}\r\n            <div ref={messageAnchorRef}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype MessagePropsType = {\r\n    message: ChatMessageType;\r\n};\r\n\r\nconst Message: React.FC<MessagePropsType> = React.memo(({ message }) => {\r\n    return (\r\n        <div>\r\n            <img\r\n                alt=\"user\"\r\n                src={\r\n                    message.photo ||\r\n                    \"https://www.pnglib.com/wp-content/uploads/2020/08/simple-user-icon_5f3407053cf89.png\"\r\n                }\r\n                style={{ maxWidth: \"50px\" }}\r\n            />{\" \"}\r\n            <b>{message.userName}</b>\r\n            <br />\r\n            {message.message}\r\n            <hr />\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n    let ref = useRef<HTMLButtonElement>(null);\r\n    const [message, setMessage] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n    const internalSendMessage = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessage(message));\r\n        setMessage(\"\");\r\n    };\r\n\r\n    return (\r\n        <div onKeyPress={(e) => {\r\n            if(e.key === \"Enter\") {\r\n                ref.current?.click()\r\n            }\r\n        }}>\r\n            <div>\r\n                <textarea\r\n                    onChange={(e) => setMessage(e.currentTarget.value)}\r\n                    value={message}\r\n                    style={{\r\n                        resize: \"none\",\r\n                        width: 200,\r\n                        height: 70,\r\n                    }}\r\n                ></textarea>\r\n            </div>\r\n            <div>\r\n                <button\r\n                ref={ref}\r\n                    disabled={status !== \"ready\"}\r\n                    onClick={internalSendMessage}\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage as React.ComponentType<any>;\r\n"],"sourceRoot":""}