{"version":3,"sources":["utils/validators/validators.ts","components/common/FormsControls.tsx","components/common/FormsControl.module.css","components/Login/Login.module.css","components/Login/Login.tsx"],"names":["requiredFiled","value","maxLength","length","FormsControl","meta","touched","error","children","showError","className","styles","form_control","Textarea","props","input","RestProps","Input","module","exports","maxLength25","maxLength15","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","validate","component","name","type","placeholder","captchaUrl","src","alt","form_summary_error","Login","isAuth","useSelector","selectIsAuth","selectCaptchaUrl","dispatch","useDispatch","internalLogin","useCallback","email","password","rememberMe","captcha","login","to","login_text","formData"],"mappings":"sHAEA,oEAAO,IAAMA,EAAgC,SAACC,GAC1C,IAAIA,EAIJ,MAAO,qBAGEC,EACT,SAACA,GAAD,OACA,SAACD,GACG,GAAIA,GAASA,EAAME,OAASD,EACxB,MAAM,cAAN,OAAqBA,EAArB,Y,qNCPNE,EAAiD,SAAC,GAIjD,IAAD,IAHFC,KAAQC,EAGN,EAHMA,QAASC,EAGf,EAHeA,MACjBC,EAEE,EAFFA,SAGMC,GADJ,iBACgBH,GAAWC,GAC7B,OACI,sBACIG,UAAWC,IAAOC,aAAe,KAAOH,GAAaE,IAAOJ,OADhE,UAGI,8BAAMC,IACN,8BAAMC,GAAa,+BAAOF,UAKzBM,EAAwC,SAACC,GAClD,IAAQC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAAf,YAAsCS,EAAtC,IACA,OACI,cAACV,EAAD,2BAAkBU,GAAlB,aACI,oDAAcC,GAAWC,QAKxBC,EAAqC,SAACH,GAC/C,IAAQC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBT,KAAf,YAAsCS,EAAtC,IACA,OACI,cAACV,EAAD,2BAAkBU,GAAlB,aACI,iDAAWC,GAAWC,S,oBCnClCE,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,8B,oBCA5ED,EAAOC,QAAU,CAAC,WAAa,0BAA0B,mBAAqB,oC,iCCD9E,+GAaMC,EAAclB,YAAU,IACxBmB,EAAcnB,YAAU,IAmExBoB,EAAiBC,YAAkD,CACrEC,KAAM,SADaD,EArDnB,SAACT,GACD,OACI,sBAAMW,SAAUX,EAAMY,aAAtB,SACI,sBAAKhB,UAAU,GAAf,UACI,qBAAKA,UAAU,GAAf,SACI,cAAC,IAAD,CACIiB,SAAU,CAAC3B,IAAeoB,GAC1BQ,UAAWX,IACXY,KAAM,QACNC,KAAK,OACLC,YAAY,YAGpB,qBAAKrB,UAAU,GAAf,SACI,cAAC,IAAD,CACIiB,SAAU,CAAC3B,IAAeoB,GAC1BQ,UAAWX,IACXY,KAAM,WACNC,KAAK,WACLC,YAAY,eAGpB,sBAAKrB,UAAU,GAAf,UACI,cAAC,IAAD,CACIkB,UAAWX,IACXY,KAAM,aACNC,KAAK,aAJb,iBAQChB,EAAMkB,YAAc,qBAAKC,IAAKnB,EAAMkB,WAAYE,IAAI,MACpDpB,EAAMkB,YACH,cAAC,IAAD,CACIL,SAAU,CAAC3B,IAAeqB,GAC1BO,UAAWX,IACXY,KAAM,UACNC,KAAK,OACLC,YAAY,YAGnBjB,EAAMP,OACH,qBAAKG,UAAWC,IAAOwB,mBAAvB,SACKrB,EAAMP,QAGf,qBAAKG,UAAU,GAAf,SACI,qDAoDL0B,UAzCS,SAACtB,GACrB,IAAMuB,EAASC,YAAYC,KACrBP,EAAaM,YAAYE,KAEzBC,EAAWC,cACXC,EAAgBC,uBAClB,SACIC,EACAC,EACAC,EACAC,GAEAP,EAASQ,YAAMJ,EAAOC,EAAUC,EAAYC,MAEhD,CAACP,IAUL,OAAIJ,EACO,cAAC,IAAD,CAAUa,GAAG,aAGpB,qCACI,qBAAKxC,UAAWC,IAAOwC,WAAvB,SACI,yCAEJ,kPACI,wFACA,4FAEJ,cAAC7B,EAAD,CAAgBG,SApBP,SAAC2B,GACdT,EACIS,EAASP,MACTO,EAASN,SACTM,EAASL,WACTK,EAASJ,UAe2BhB,WAAYA","file":"static/js/8.3379954d.chunk.js","sourcesContent":["export type FieldValidator = (value: string) => string | undefined;\r\n\r\nexport const requiredFiled: FieldValidator = (value) => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLength =\r\n    (maxLength: number): FieldValidator =>\r\n    (value) => {\r\n        if (value && value.length > maxLength) {\r\n            return `Max len is ${maxLength} symb`;\r\n        }\r\n        return undefined;\r\n    };\r\n","import styles from \"./FormsControl.module.css\";\r\nimport React from \"react\";\r\nimport { WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\n\r\ntype FormsControlsPropsType = {\r\n    meta: WrappedFieldMetaProps;\r\n};\r\nconst FormsControl: React.FC<FormsControlsPropsType> = ({\r\n    meta: { touched, error },\r\n    children,\r\n    ...props\r\n}) => {\r\n    const showError = touched && error;\r\n    return (\r\n        <div\r\n            className={styles.form_control + \" \" + (showError && styles.error)}\r\n        >\r\n            <div>{children}</div>\r\n            <div>{showError && <span>{error}</span>}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...RestProps } = props;\r\n    return (\r\n        <FormsControl {...props}>\r\n            <textarea {...input} {...RestProps}></textarea>\r\n        </FormsControl>\r\n    );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...RestProps } = props;\r\n    return (\r\n        <FormsControl {...props}>\r\n            <input {...input} {...RestProps}></input>\r\n        </FormsControl>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_control\":\"FormsControl_form_control__36Uzx\",\"error\":\"FormsControl_error__3o0CI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_text\":\"Login_login_text__qir5O\",\"form_summary_error\":\"Login_form_summary_error__37le-\"};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLength, requiredFiled } from \"../../utils/validators/validators\";\r\nimport { Input } from \"../common/FormsControls\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport styles from \"./Login.module.css\";\r\nimport { Redirect } from \"react-router\";\r\nimport React, { useCallback } from \"react\";\r\nimport {\r\n    selectCaptchaUrl,\r\n    selectIsAuth,\r\n} from \"../../redux/selectors/auth-selectors\";\r\n\r\nconst maxLength25 = maxLength(25);\r\nconst maxLength15 = maxLength(15);\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null;\r\n};\r\ntype LoginFormValuesType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string;\r\n};\r\nconst LoginForm: React.FC<\r\n    InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> &\r\n        LoginFormOwnProps\r\n> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className=\"\">\r\n                <div className=\"\">\r\n                    <Field\r\n                        validate={[requiredFiled, maxLength25]}\r\n                        component={Input}\r\n                        name={\"email\"}\r\n                        type=\"text\"\r\n                        placeholder=\"login\"\r\n                    />\r\n                </div>\r\n                <div className=\"\">\r\n                    <Field\r\n                        validate={[requiredFiled, maxLength25]}\r\n                        component={Input}\r\n                        name={\"password\"}\r\n                        type=\"password\"\r\n                        placeholder=\"password\"\r\n                    />\r\n                </div>\r\n                <div className=\"\">\r\n                    <Field\r\n                        component={Input}\r\n                        name={\"rememberMe\"}\r\n                        type=\"checkbox\"\r\n                    />\r\n                    remember me\r\n                </div>\r\n                {props.captchaUrl && <img src={props.captchaUrl} alt=\" \" />}\r\n                {props.captchaUrl && (\r\n                    <Field\r\n                        validate={[requiredFiled, maxLength15]}\r\n                        component={Input}\r\n                        name={\"captcha\"}\r\n                        type=\"text\"\r\n                        placeholder=\"captcha\"\r\n                    />\r\n                )}\r\n                {props.error && (\r\n                    <div className={styles.form_summary_error}>\r\n                        {props.error}\r\n                    </div>\r\n                )}\r\n                <div className=\"\">\r\n                    <button>Login</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: \"login\",\r\n})(LoginForm);\r\n\r\nconst Login: React.FC = (props) => {\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const captchaUrl = useSelector(selectCaptchaUrl);\r\n\r\n    const dispatch = useDispatch();\r\n    const internalLogin = useCallback(\r\n        (\r\n            email: string,\r\n            password: string,\r\n            rememberMe: boolean,\r\n            captcha: any\r\n        ) => {\r\n            dispatch(login(email, password, rememberMe, captcha));\r\n        },\r\n        [dispatch]\r\n    );\r\n    const OnSubmit = (formData: any) => {\r\n        internalLogin(\r\n            formData.email,\r\n            formData.password,\r\n            formData.rememberMe,\r\n            formData.captcha\r\n        );\r\n    };\r\n    if (isAuth) {\r\n        return <Redirect to=\"/profile\" />;\r\n    }\r\n    return (\r\n        <>\r\n            <div className={styles.login_text}>\r\n                <h1>Login</h1>\r\n            </div>\r\n            <div>Для просмотра внутреннего функционала\r\n                <div>Логин: cehole2879@richdn.com</div>\r\n                <div>Пароль: s04jdai8182dsakd</div>\r\n            </div>\r\n            <LoginReduxForm onSubmit={OnSubmit} captchaUrl={captchaUrl} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}