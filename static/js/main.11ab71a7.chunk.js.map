{"version":3,"sources":["components/Header/Header.module.css","redux/profile-reducer.ts","redux/dialogs-reducer.ts","utils/object-helpers.ts","redux/users-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","api/api.ts","components/Nav/Nav.tsx","components/Header/Header.tsx","redux/app-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","reportWebVitals.js","index.tsx","api/users-api.ts","api/profile-api.ts","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/common/preloader.tsx","redux/selectors/auth-selectors.ts"],"names":["module","exports","actions","addPostActionCreator","postText","type","setUserProfile","profile","setStatus","status","savePhotoSucces","photo","updateProfileData","profileData","getUserProfile","userId","dispatch","a","usersAPI","getProfile","data","savePhoto","image","profileApi","setPhoto","response","photos","getStatus","updateStatus","resultCode","saveProfile","formData","getState","ProfileData","initialState","PostsData","id","message","profileReducer","state","action","length","sendMessageActionCreator","DialogsData","name","MessageData","dialogsReducer","updateObjectInArray","items","objPropName","newObjProps","map","e","UsersData","isFetching","isFollowingInProgress","filter","term","friend","showedLastPage","countPageMayRecieved","getUsersThunkCreator","UserPageData","toggleFetching","getUsers","setUsers","setCountOfPages","Math","floor","totalCount","getMoreUsers","showMoreUsers","followUnfollowToggle","getFunc","toggleFollowing","follow","addToList","followUser","unfollow","removeFromList","unfollowUser","page","count","toggle","users","reset","append","setFilter","userReducer","followed","ws","subscribers","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","newMesssages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","messages","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListener","stopMessagesListener","sendMessage","chatReducer","m","v1","index","array","instanse","axios","create","withCredentials","baseURL","headers","Nav","theme","mode","defaultSelectedKeys","Item","icon","UserOutlined","to","MessageOutlined","SearchOutlined","Header","Layout","HeaderComponent","collapsed","isAuth","useSelector","selectIsAuth","login","selectCurrentUserLogin","useDispatch","className","styles","header","style","padding","span","MenuUnfoldOutlined","onClick","MenuFoldOutlined","login_block","logout","initialized","reducers","combineReducers","DialogsPageData","auth","authReducer","form","formReducer","app","chat","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","WrappedComponent","props","fallback","ChatPage","React","lazy","DialogsContainer","ProfileContainer","FindUsersContainer","Login","SuspendedDialogs","SuspendedProfile","SuspendedLogin","SuspendedUserProfile","SuspendedChat","Sider","Content","App","catchAllUnhandledErrors","warn","setState","this","initializeApp","window","trigger","collapsible","bind","margin","minHeight","exact","path","render","Component","AppContainer","compose","withRouter","connect","getAuthUserData","then","SamuraiJSApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","termString","friendString","get","post","delete","put","FormData","ResultCodesEnum","ResultCodesForCaptcha","authAPI","email","password","rememberMe","captcha","securityApi","captchaUrl","Success","setUserData","log","CaptchaIsRequired","getCaptchaUrl","stopSubmit","_error","url","setCaptchaUrl","payload","Preloader","src","alt","selectCaptchaUrl"],"mappings":"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","file":"static/js/main.11ab71a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_block\":\"Header_login_block__csTuT\"};","import { PhotosType } from \"./../types/types\";\r\nimport { InferActionsTypes, ThunkType } from \"./redux-store\";\r\nimport { profileApi } from \"../api/profile-api\";\r\nimport { usersAPI } from \"../api/users-api\";\r\nimport { ProfileType } from \"../types/types\";\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (postText: string) =>\r\n        ({ type: \"ADD_POST\", postText } as const),\r\n    setUserProfile: (profile: ProfileType) =>\r\n        ({ type: \"SET_USER_PROFILE\", profile: profile } as const),\r\n    setStatus: (status: string) =>\r\n        ({ type: \"SET_STATUS\", status: status } as const),\r\n    savePhotoSucces: (photo: PhotosType) =>\r\n        ({ type: \"SAVE_PHOTO\", photo: photo } as const),\r\n    updateProfileData: (profileData: ProfileType) =>\r\n        ({ type: \"UPDATE_PROFILE\", profile: profileData } as const),\r\n};\r\n\r\nfunction getUserProfile(userId: number): ProfileThunkType {\r\n    return async (dispatch) => {\r\n        let data = await usersAPI.getProfile(userId);\r\n        dispatch(actions.setUserProfile(data));\r\n    };\r\n}\r\nfunction savePhoto(image: string): ProfileThunkType {\r\n    return async (dispatch) => {\r\n        let response = await profileApi.setPhoto(image);\r\n        dispatch(actions.savePhotoSucces(response.data.photos));\r\n    };\r\n}\r\nfunction getStatus(userId: number): ProfileThunkType {\r\n    return async (dispatch) => {\r\n        let data = await profileApi.getStatus(userId);\r\n        dispatch(actions.setStatus(data));\r\n    };\r\n}\r\nfunction updateStatus(status: string): ProfileThunkType {\r\n    return async (dispatch) => {\r\n        let data = await profileApi.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    };\r\n}\r\nfunction saveProfile(formData: ProfileType): ProfileThunkType {\r\n    return async (dispatch, getState) => {\r\n        let data = await profileApi.saveProfile({\r\n            ...formData,\r\n            photos: getState().ProfileData.profile?.photos as PhotosType,\r\n        });\r\n        if (data.data.resultCode === 0) {\r\n            dispatch(\r\n                actions.updateProfileData({\r\n                    ...formData,\r\n                    photos: getState().ProfileData.profile\r\n                        ?.photos as PhotosType,\r\n                })\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nlet initialState = {\r\n    PostsData: [\r\n        { id: 1, message: \"Hello, i'm first post\" },\r\n        { id: 2, message: \"I'm your 2 post\" },\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n};\r\n\r\nlet profileReducer = (\r\n    state = initialState,\r\n    action: ActionsTypes\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_POST\": {\r\n            return {\r\n                ...state,\r\n                PostsData: [\r\n                    ...state.PostsData,\r\n                    {\r\n                        id: state.PostsData.length + 1,\r\n                        message: action.postText,\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        case \"SET_USER_PROFILE\": {\r\n            return { ...state, profile: action.profile };\r\n        }\r\n        case \"SET_STATUS\": {\r\n            return { ...state, status: action.status };\r\n        }\r\n        case \"SAVE_PHOTO\": {\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: action.photo,\r\n                } as ProfileType,\r\n            };\r\n        }\r\n        case \"UPDATE_PROFILE\": {\r\n            return { ...state, profile: { ...action.profile } };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport {\r\n    profileReducer,\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n};\r\n\r\nexport type PostType = { id: number; message: string };\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ProfileThunkType = ThunkType<ActionsTypes>;\r\n","import { InferActionsTypes } from \"./redux-store\";\r\nexport const actions = {\r\n    sendMessageActionCreator: (message: string) =>\r\n        ({ type: \"SEND_MESSAGE\", message } as const),\r\n};\r\n\r\nlet initialState = {\r\n    DialogsData: [\r\n        { id: 1, name: \"Andrew\" },\r\n        { id: 2, name: \"Steve\" },\r\n    ] as Array<DialogType>,\r\n    MessageData: [\r\n        { id: 1, message: \"Hi\" },\r\n        { id: 2, message: \"How your\" },\r\n        { id: 3, message: \"Learning?\" },\r\n    ] as Array<MessageType>,\r\n};\r\n\r\nlet dialogsReducer = (\r\n    state = initialState,\r\n    action: ActionsTypes\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SEND_MESSAGE\": {\r\n            return {\r\n                ...state,\r\n                MessageData: [\r\n                    ...state.MessageData,\r\n                    {\r\n                        id: state.MessageData.length + 1,\r\n                        message: action.message,\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { dialogsReducer };\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\ntype DialogType = {\r\n    id: number;\r\n    name: string;\r\n};\r\n\r\ntype MessageType = {\r\n    id: number;\r\n    message: string;\r\n};\r\n","export const updateObjectInArray = (\r\n    items: any,\r\n    userId: any,\r\n    objPropName: any,\r\n    newObjProps: any\r\n) => {\r\n    return items.map((e: any) => {\r\n        if (e[objPropName] === userId) {\r\n            return { ...e, ...newObjProps };\r\n        }\r\n        return e;\r\n    });\r\n};\r\n","import { ResponseType } from \"./../api/api\";\r\nimport { usersAPI } from \"../api/users-api\";\r\nimport { updateObjectInArray } from \"../utils/object-helpers\";\r\nimport { UserType } from \"../types/types\";\r\nimport { Dispatch } from \"react\";\r\nimport { InferActionsTypes, ThunkType } from \"./redux-store\";\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actions>;\r\ntype UsersThunkType = ThunkType<ActionTypes>;\r\nexport type InitialStateType = typeof initialState;\r\n\r\nlet initialState = {\r\n    UsersData: [] as Array<UserType>,\r\n    isFetching: true,\r\n    isFollowingInProgress: [] as Array<number>,\r\n    filter: { term: \"\" as null | string, friend: null as null | boolean },\r\n    showedLastPage: 2,\r\n    countPageMayRecieved: 0,\r\n};\r\n\r\nlet getUsersThunkCreator = (): UsersThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const { term, friend } = getState().UserPageData.filter;\r\n        dispatch(actions.toggleFetching(true));\r\n        let data = await usersAPI.getUsers(term, friend);\r\n        dispatch(actions.setUsers(data.items, true));\r\n        dispatch(actions.toggleFetching(false));\r\n        dispatch(actions.setCountOfPages(Math.floor(data.totalCount / 10) + 1));\r\n    };\r\n};\r\nlet getMoreUsers = (): UsersThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const { term, friend } = getState().UserPageData.filter;\r\n        const showedLastPage = getState().UserPageData.showedLastPage;\r\n        const countPageMayRecieved =\r\n            getState().UserPageData.countPageMayRecieved;\r\n        let data;\r\n        if (\r\n            showedLastPage < countPageMayRecieved &&\r\n            countPageMayRecieved !== 0 &&\r\n            countPageMayRecieved !== 1\r\n        ) {\r\n            dispatch(actions.showMoreUsers(showedLastPage + 1));\r\n            data = await usersAPI.getUsers(term, friend, showedLastPage);\r\n            dispatch(actions.setUsers(data.items, false, true));\r\n        }\r\n    };\r\n};\r\nlet followUnfollowToggle = async (\r\n    userId: number,\r\n    dispatch: Dispatch<ActionTypes>,\r\n    action: any,\r\n    getFunc: (userId: number) => Promise<ResponseType>\r\n) => {\r\n    dispatch(actions.toggleFollowing(userId, true));\r\n    let data = await getFunc(userId);\r\n    if (data.resultCode === 0) {\r\n        dispatch(action(userId));\r\n    }\r\n    dispatch(actions.toggleFollowing(userId, false));\r\n};\r\nlet follow = (userId: number): UsersThunkType => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        await followUnfollowToggle(\r\n            userId,\r\n            dispatch,\r\n            actions.addToList,\r\n            usersAPI.followUser\r\n        );\r\n    };\r\n};\r\nlet unfollow = (userId: number): UsersThunkType => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        await followUnfollowToggle(\r\n            userId,\r\n            dispatch,\r\n            actions.removeFromList,\r\n            usersAPI.unfollowUser\r\n        );\r\n    };\r\n};\r\nlet resetFind = (): UsersThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleFetching(true));\r\n        let data = await usersAPI.getUsers();\r\n        dispatch(actions.toggleFetching(false));\r\n        dispatch(actions.setUsers(data.items, true));\r\n    };\r\n};\r\n\r\nexport const actions = {\r\n    showMoreUsers: (page: number) =>\r\n        ({ type: \"SHOW_MORE_USERS\", page } as const),\r\n    setCountOfPages: (count: number) =>\r\n        ({ type: \"SET_COUNT_OF_PAGES\", count } as const),\r\n    toggleFetching: (toggle: boolean) =>\r\n        ({ type: \"TOGGLE_IS_FETCHING\", toggleFetching: toggle } as const),\r\n    setUsers: (\r\n        users: Array<UserType>,\r\n        reset: boolean = false,\r\n        append: boolean = false\r\n    ) => ({ type: \"SET_USERS\", users, reset, append } as const),\r\n    addToList: (userId: number) => ({ type: \"ADD_TO_LIST\", userId } as const),\r\n    removeFromList: (userId: number) =>\r\n        ({ type: \"REMOVE_FROM_LIST\", userId } as const),\r\n    toggleFollowing: (userId: number, isFetching: boolean) =>\r\n        ({\r\n            type: \"TOGGLE_IS_FOLLOWING_IN_PROGRESS\",\r\n            userId,\r\n            isFetching,\r\n        } as const),\r\n    setFilter: (term: string | null, friend: null | boolean = null) =>\r\n        ({ type: \"SET_FILTER\", filter: { term, friend } as const } as const),\r\n};\r\n\r\nlet userReducer = (\r\n    state = initialState,\r\n    action: ActionTypes\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SHOW_MORE_USERS\": {\r\n            return { ...state, showedLastPage: action.page };\r\n        }\r\n        case \"SET_COUNT_OF_PAGES\": {\r\n            return { ...state, countPageMayRecieved: action.count };\r\n        }\r\n        case \"TOGGLE_IS_FETCHING\": {\r\n            return { ...state, isFetching: action.toggleFetching };\r\n        }\r\n        case \"TOGGLE_IS_FOLLOWING_IN_PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                isFollowingInProgress: action.isFetching\r\n                    ? [...state.isFollowingInProgress, action.userId]\r\n                    : state.isFollowingInProgress.filter(\r\n                          (id) => id !== action.userId\r\n                      ),\r\n            };\r\n        }\r\n        case \"SET_USERS\": {\r\n            if (\r\n                state.UsersData.length === 0 &&\r\n                !action.reset &&\r\n                !action.append\r\n            ) {\r\n                return {\r\n                    ...state,\r\n                    UsersData: [...state.UsersData, ...action.users],\r\n                };\r\n            } else if (action.reset) {\r\n                return {\r\n                    ...state,\r\n                    UsersData: [...action.users],\r\n                };\r\n            } else if (action.append) {\r\n                return {\r\n                    ...state,\r\n                    UsersData: [...state.UsersData, ...action.users],\r\n                };\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        case \"ADD_TO_LIST\": {\r\n            return {\r\n                ...state,\r\n                UsersData: updateObjectInArray(\r\n                    state.UsersData,\r\n                    action.userId,\r\n                    \"id\",\r\n                    { followed: true }\r\n                ),\r\n            };\r\n        }\r\n        case \"REMOVE_FROM_LIST\": {\r\n            return {\r\n                ...state,\r\n                UsersData: updateObjectInArray(\r\n                    state.UsersData,\r\n                    action.userId,\r\n                    \"id\",\r\n                    { followed: false }\r\n                ),\r\n            };\r\n        }\r\n        case \"SET_FILTER\": {\r\n            return {\r\n                ...state,\r\n                filter: { ...action.filter },\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport {\r\n    userReducer,\r\n    getUsersThunkCreator,\r\n    getMoreUsers,\r\n    follow,\r\n    unfollow,\r\n    resetFind,\r\n};\r\n","import { ChatMessageType } from \"./../redux/chat-reducer\";\r\n\r\nlet subscribers = {\r\n    \"messages-received\": [] as MessagesReceivedSubscriberType[],\r\n    \"status-changed\": [] as StatusChangedSubscriberType[],\r\n};\r\n\r\nlet ws: WebSocket | null;\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus(\"pending\");\r\n    setTimeout(createChannel, 3000);\r\n};\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMesssages = JSON.parse(e.data);\r\n    subscribers[\"messages-received\"].forEach((s) => s(newMesssages));\r\n};\r\n\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus(\"ready\");\r\n};\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus(\"error\");\r\n    console.error(\"REFRESH PAGE\");\r\n};\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener(\"close\", closeHandler);\r\n    ws?.removeEventListener(\"message\", messageHandler);\r\n    ws?.removeEventListener(\"open\", openHandler);\r\n    ws?.removeEventListener(\"error\", errorHandler);\r\n};\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers[\"status-changed\"].forEach((s) => s(status));\r\n};\r\n\r\nfunction createChannel() {\r\n    cleanUp();\r\n    ws?.close();\r\n    notifySubscribersAboutStatus(\"pending\");\r\n    ws = new WebSocket(\r\n        \"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\"\r\n    );\r\n    ws.addEventListener(\"close\", closeHandler);\r\n    ws.addEventListener(\"message\", messageHandler);\r\n    ws.addEventListener(\"open\", openHandler);\r\n    ws.addEventListener(\"error\", errorHandler);\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel();\r\n    },\r\n    stop() {\r\n        subscribers[\"messages-received\"] = [];\r\n        subscribers[\"status-changed\"] = [];\r\n        cleanUp();\r\n        ws?.close();\r\n    },\r\n    subscribe(\r\n        eventName: EventsNameType,\r\n        callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\r\n    ) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback);\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(\r\n                (s: any) => s !== callback\r\n            );\r\n        };\r\n    },\r\n    unsubscribe(\r\n        eventName: EventsNameType,\r\n        callback: SubscriberType | StatusChangedSubscriberType\r\n    ) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(\r\n            (s: any) => s !== callback\r\n        );\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message);\r\n    },\r\n};\r\n\r\ntype SubscriberType = (messages: ChatMessageType[]) => void;\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageType[]) => void;\r\ntype StatusChangedSubscriberType = (status: StatusType) => void;\r\n\r\ntype EventsNameType = \"messages-received\" | \"status-changed\";\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string;\r\n    photo: string;\r\n    userId: number;\r\n    userName: string;\r\n};\r\n\r\nexport type StatusType = \"pending\" | \"ready\" | \"error\";\r\n","import { StatusType } from \"./../api/chat-api\";\r\nimport { Dispatch } from \"react\";\r\nimport { chatAPI } from \"../api/chat-api\";\r\nimport { InferActionsTypes, ThunkType } from \"./redux-store\";\r\nimport { ChatMessageAPIType } from \"../api/chat-api\";\r\nimport { v1 } from \"uuid\";\r\n\r\nexport type ChatMessageType = ChatMessageAPIType & { id: string };\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: \"pending\" as StatusType,\r\n};\r\n\r\nconst actions = {\r\n    messagesReceived: (messages: ChatMessageType[]) =>\r\n        ({\r\n            type: \"MESSAGES_RECIEVED\",\r\n            messages,\r\n        } as const),\r\n    statusChanged: (status: StatusType) =>\r\n        ({\r\n            type: \"STATUS_CHANGED\",\r\n            status,\r\n        } as const),\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ChatThunkType = ThunkType<ActionsType>;\r\n\r\nlet chatReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"MESSAGES_RECIEVED\": {\r\n            return {\r\n                ...state,\r\n                messages: [\r\n                    ...state.messages,\r\n                    ...action.messages.map((m) => ({ ...m, id: v1() })),\r\n                ].filter((m, index, array) => index >= array.length - 100),\r\n            };\r\n        }\r\n        case \"STATUS_CHANGED\": {\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null;\r\n\r\nconst newMessageHandlerCreator = (dispatch: Dispatch<ActionsType>) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages));\r\n        };\r\n    }\r\n    return _newMessageHandler;\r\n};\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\n\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch<ActionsType>) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status));\r\n        };\r\n    }\r\n    return _statusChangedHandler;\r\n};\r\n\r\nexport const startMessagesListener = (): ChatThunkType => {\r\n    return async (dispatch) => {\r\n        chatAPI.start();\r\n        chatAPI.subscribe(\r\n            \"messages-received\",\r\n            newMessageHandlerCreator(dispatch)\r\n        );\r\n        chatAPI.subscribe(\r\n            \"status-changed\",\r\n            statusChangedHandlerCreator(dispatch)\r\n        );\r\n    };\r\n};\r\nexport const stopMessagesListener = (): ChatThunkType => {\r\n    return async (dispatch) => {\r\n        chatAPI.stop();\r\n        chatAPI.unsubscribe(\r\n            \"messages-received\",\r\n            newMessageHandlerCreator(dispatch)\r\n        );\r\n        chatAPI.unsubscribe(\r\n            \"status-changed\",\r\n            statusChangedHandlerCreator(dispatch)\r\n        );\r\n    };\r\n};\r\nexport const sendMessage = (message: string): ChatThunkType => {\r\n    return async (dispatch) => {\r\n        chatAPI.sendMessage(message);\r\n    };\r\n};\r\n\r\nexport default chatReducer;\r\n","import { ResultCodesEnum } from \"./auth-api\";\r\nimport axios from \"axios\";\r\nimport { UserType } from \"../types/types\";\r\n\r\nexport const instanse = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"7c1e154d-c9fa-462a-a3ab-37087c5bc201\",\r\n    },\r\n});\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>;\r\n    totalCount: number;\r\n    error: string | null;\r\n};\r\n\r\nexport type ResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D;\r\n    messages: Array<string>;\r\n    resultCode: RC;\r\n};\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Menu } from \"antd\";\r\nimport {\r\n    UserOutlined,\r\n    MessageOutlined,\r\n    SearchOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n            <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                <NavLink to=\"/profile\">Profile</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\" icon={<MessageOutlined />}>\r\n                <NavLink to=\"/dialogs\">Messages</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\" icon={<SearchOutlined />}>\r\n                <NavLink to=\"/findUsers\">Find Users</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"4\" icon={<MessageOutlined />}>\r\n                <NavLink to=\"/chat\">Chat</NavLink>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styles from \"./Header.module.css\";\r\nimport { Col, Layout, Row, Button } from \"antd\";\r\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from \"@ant-design/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout } from \"../../redux/auth-reducer\";\r\nimport {\r\n    selectCurrentUserLogin,\r\n    selectIsAuth,\r\n} from \"../../redux/selectors/auth-selectors\";\r\n\r\nexport type OwnPropsType = {\r\n    collapsed: boolean;\r\n    toggle: () => void;\r\n};\r\n\r\nconst { Header } = Layout;\r\n\r\nconst HeaderComponent: React.FC<OwnPropsType> = ({ collapsed, toggle }) => {\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const login = useSelector(selectCurrentUserLogin);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className={styles.header}>\r\n            <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n                <Row>\r\n                    <Col span={17}>\r\n                        {collapsed ? (\r\n                            <MenuUnfoldOutlined\r\n                                onClick={toggle}\r\n                                className=\"trigger menuTrigger\"\r\n                            />\r\n                        ) : (\r\n                            <MenuFoldOutlined\r\n                                onClick={toggle}\r\n                                className=\"trigger menuTrigger\"\r\n                            />\r\n                        )}\r\n                    </Col>\r\n                    <Col span={7}>\r\n                        <div className={styles.login_block}>\r\n                            {isAuth ? (\r\n                                <div>\r\n                                    {login} -{\" \"}\r\n                                    <Button onClick={() => dispatch(logout())}>\r\n                                        Logout\r\n                                    </Button>\r\n                                </div>\r\n                            ) : (\r\n                                <Button>\r\n                                    <NavLink to={\"/login\"}> login </NavLink>\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeaderComponent;\r\n","import { InferActionsTypes } from \"./redux-store\";\r\nimport { getAuthUserData } from \"./auth-reducer\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n};\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nlet appReducer = (\r\n    state = initialState,\r\n    action: ActionsTypes\r\n): initialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({ type: \"INITIALIZED-SUCCESS\" } as const),\r\n};\r\n\r\nlet initializeApp = () => {\r\n    return (dispatch: Function) => {\r\n        let promise = dispatch(getAuthUserData());\r\n        promise.then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n    };\r\n};\r\n\r\nexport { appReducer, initializeApp };\r\n","import { Action, applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { dialogsReducer } from \"./dialogs-reducer\";\r\nimport { profileReducer } from \"./profile-reducer\";\r\nimport { userReducer } from \"./users-reducer\";\r\nimport { authReducer } from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    ProfileData: profileReducer,\r\n    DialogsPageData: dialogsReducer,\r\n    UserPageData: userReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer,\r\n});\r\n\r\nexport type InferActionsTypes<T> = T extends {\r\n    [keys: string]: (...args: any[]) => infer U;\r\n}\r\n    ? U\r\n    : never;\r\n\r\nexport type ThunkType<AT extends Action, R = Promise<void>> = ThunkAction<\r\n    R,\r\n    AppStateType,\r\n    unknown,\r\n    AT\r\n>;\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport { store };\r\n","import React, { Suspense } from \"react\";\r\nimport { Preloader } from \"../components/common/preloader\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (\r\n            <Suspense fallback={<Preloader />}>\r\n                <WrappedComponent {...props} />\r\n            </Suspense>\r\n        );\r\n    };\r\n}\r\n","import \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport { Layout } from \"antd\";\nimport React from \"react\";\nimport Nav from \"./components/Nav/Nav\";\nimport HeaderComponent from \"./components/Header/Header\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { connect, Provider } from \"react-redux\";\nimport { initializeApp } from \"./redux/app-reducer\";\nimport { compose } from \"redux\";\nimport { withRouter } from \"react-router\";\nimport { Preloader } from \"./components/common/preloader\";\nimport { AppStateType, store } from \"./redux/redux-store\";\nimport { HashRouter } from \"react-router-dom\";\nimport { withSuspense } from \"./hoc/withSuspense\";\nimport { Redirect } from \"react-router-dom\";\nconst ChatPage = React.lazy(() => import(\"./pages/ChatPage\"));\nconst DialogsContainer = React.lazy(\n    () => import(\"./components/Dialogs/DialogsContainer\")\n);\nconst ProfileContainer = React.lazy(\n    () => import(\"./components/Profile/ProfileContainer\")\n);\nconst FindUsersContainer = React.lazy(\n    () => import(\"./components/FindUsers/FindUsersContainer\")\n);\nconst Login = React.lazy(() => import(\"./components/Login/Login\"));\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(FindUsersContainer);\nconst SuspendedLogin = withSuspense(Login);\nconst SuspendedUserProfile = withSuspense(ProfileContainer);\nconst SuspendedChat = withSuspense(ChatPage);\n\ntype PropsType = ReturnType<typeof mapStateToProps>;\ntype DispatchPropsType = {\n    initializeApp: () => void;\n};\n\nconst { Sider, Content } = Layout;\n\nclass App extends React.Component<PropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        console.warn(\"Some error occured\");\n    };\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener(\n            \"unhandledrejection\",\n            this.catchAllUnhandledErrors\n        );\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\n            \"unhandledrejection\",\n            this.catchAllUnhandledErrors\n        );\n    }\n    state = {\n        collapsed: false,\n    };\n    toggle = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        });\n    };\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader />;\n        }\n        return (\n            <Layout>\n                <Sider\n                    trigger={null}\n                    collapsible\n                    collapsed={this.state.collapsed}\n                >\n                    <div className=\"logo\" />\n                    <Nav />\n                </Sider>\n                <Layout className=\"site-layout\">\n                    <HeaderComponent\n                        toggle={this.toggle.bind(App)}\n                        collapsed={this.state.collapsed}\n                    />\n                    <Content\n                        className=\"site-layout-background\"\n                        style={{\n                            margin: \"24px 16px\",\n                            padding: 24,\n                            minHeight: 280,\n                        }}\n                    >\n                        <Switch>\n                            <Route\n                                exact\n                                path=\"/\"\n                                render={() => <Redirect to={\"/profile\"} />}\n                            />\n                            <Route\n                                path=\"/profile/:userId?\"\n                                render={() => <SuspendedUserProfile />}\n                            />\n                            <Route\n                                path=\"/dialogs\"\n                                render={() => <SuspendedDialogs />}\n                            />\n                            <Route\n                                path=\"/findUsers\"\n                                render={() => <SuspendedProfile />}\n                            />\n                            <Route\n                                path=\"/login\"\n                                render={() => <SuspendedLogin />}\n                            />\n                            <Route\n                                path=\"/chat\"\n                                render={() => <SuspendedChat />}\n                            />\n                            <Route\n                                path=\"*\"\n                                render={() => <div>404 NOT FOUND</div>}\n                            />\n                        </Switch>\n                    </Content>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n});\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, { initializeApp })\n)(App);\n\nlet SamuraiJSApp: React.FC = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <AppContainer />\n            </Provider>\n        </HashRouter>\n    );\n};\nexport default SamuraiJSApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SamuraiJSApp from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./redux/redux-store\";\n// @ts-ignore\nwindow.store = store;\n\nReactDOM.render(\n    <React.StrictMode>\n        <SamuraiJSApp />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { instanse, GetItemsType, ResponseType } from \"./api\";\r\nimport { profileApi } from \"./profile-api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(\r\n        term: string | null = \"\",\r\n        friend: null | boolean = null,\r\n        page: number = 1\r\n    ) {\r\n        const termString = `term=${term}`;\r\n        const friendString = `friend=${friend}`;\r\n        /* eslint-disable */\r\n        if ((term === \"\" || term === null) && friend === null) {\r\n            return instanse\r\n                .get<GetItemsType>(\"users?page=\" + `${page}`)\r\n                .then((response) => response.data);\r\n        } else if (term !== \"\" && term !== null && friend === null) {\r\n            return instanse\r\n                .get<GetItemsType>(\"users\" + \"?\" + termString)\r\n                .then((response) => response.data);\r\n        } else if ((term === \"\" || term === null) && friend !== null) {\r\n            return instanse\r\n                .get<GetItemsType>(\"users\" + \"?\" + friendString)\r\n                .then((response) => response.data);\r\n        } else if (term !== \"\" && term !== null && friend !== null) {\r\n            return instanse\r\n                .get<GetItemsType>(\r\n                    \"users\" + \"?\" + termString + \"&\" + friendString\r\n                )\r\n                .then((response) => response.data);\r\n        } else\r\n            return instanse\r\n                .get<GetItemsType>(\"users?page=1\")\r\n                .then((response) => response.data);\r\n        /* eslint-enable */\r\n    },\r\n    getProfile(userId: number) {\r\n        return profileApi.getProfile(userId);\r\n    },\r\n    followUser(userId: number) {\r\n        return instanse\r\n            .post<ResponseType>(`follow/${userId}`)\r\n            .then((response) => response.data);\r\n    },\r\n    unfollowUser(userId: number) {\r\n        return instanse\r\n            .delete(`follow/${userId}`)\r\n            .then((response) => response.data) as Promise<ResponseType>;\r\n    },\r\n};\r\n","import { instanse, ResponseType } from \"./api\";\r\nimport { ProfileType, PhotosType } from \"../types/types\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType;\r\n};\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instanse\r\n            .get<ProfileType>(\"/profile/\" + userId)\r\n            .then((response) => response.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instanse\r\n            .get<string>(\"/profile/status/\" + userId)\r\n            .then((response) => response.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instanse\r\n            .put<ResponseType>(\"/profile/status/\", { status: status })\r\n            .then((response) => response.data);\r\n    },\r\n    setPhoto(photo: string) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photo);\r\n        return instanse\r\n            .put<ResponseType<SavePhotoResponseDataType>>(\r\n                \"/profile/photo/\",\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        \"Content-type\": \"multipart/form-data\",\r\n                    },\r\n                }\r\n            )\r\n            .then((response) => response.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instanse.put<ResponseType>(\"/profile\", profile);\r\n    },\r\n};\r\n","import { instanse, ResponseType } from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number;\r\n    email: string;\r\n    login: string;\r\n};\r\n\r\ntype LoginResponseType = {\r\n    userId: number;\r\n};\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodesForCaptcha {\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instanse\r\n            .get<ResponseType<MeResponseDataType, ResultCodesEnum>>(\"/auth/me\")\r\n            .then((response) => response.data);\r\n    },\r\n    login(\r\n        email: string,\r\n        password: string,\r\n        rememberMe = false,\r\n        captcha: null | string = null\r\n    ) {\r\n        return instanse\r\n            .post<\r\n                ResponseType<\r\n                    LoginResponseType,\r\n                    ResultCodesEnum | ResultCodesForCaptcha\r\n                >\r\n            >(\"auth/login\", {\r\n                email,\r\n                password,\r\n                rememberMe,\r\n                captcha,\r\n            })\r\n            .then((response) => response.data);\r\n    },\r\n    logout() {\r\n        return instanse.delete(\"auth/login\").then((response) => response.data);\r\n    },\r\n};\r\n","import { instanse } from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string;\r\n};\r\n\r\nexport const securityApi = {\r\n    getCaptchaUrl() {\r\n        return instanse.get<GetCaptchaUrlResponseType>(\r\n            \"security/get-captcha-url\"\r\n        );\r\n    },\r\n};\r\n","import { InferActionsTypes, ThunkType } from \"./redux-store\";\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport {\r\n    authAPI,\r\n    ResultCodesEnum,\r\n    ResultCodesForCaptcha,\r\n} from \"../api/auth-api\";\r\nimport { securityApi } from \"../api/security-api\";\r\n\r\nlet initialState: initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null,\r\n};\r\n\r\nlet getAuthUserData = (): AuthThunkType => async (dispatch) => {\r\n    let data = await authAPI.authMe();\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        let { email, login, id }: { email: string; login: string; id: number } =\r\n            data.data;\r\n        dispatch(actions.setUserData(email, login, id, true));\r\n    }\r\n};\r\n\r\nlet login =\r\n    (\r\n        email: string,\r\n        password: string,\r\n        rememberMe: boolean,\r\n        captcha: any\r\n    ): AuthThunkType =>\r\n    async (dispatch) => {\r\n        console.log(dispatch);\r\n        let response = await authAPI.login(\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        );\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(getAuthUserData());\r\n        } else {\r\n            if (\r\n                response.resultCode === ResultCodesForCaptcha.CaptchaIsRequired\r\n            ) {\r\n                dispatch(getCaptchaUrl());\r\n            }\r\n            let message =\r\n                response.messages.length > 0\r\n                    ? response.messages[0]\r\n                    : \"Some error\";\r\n            dispatch(stopSubmit(\"login\", { _error: message }));\r\n        }\r\n    };\r\n\r\nlet logout = (): AuthThunkType => async (dispatch) => {\r\n    let data = await authAPI.logout();\r\n    console.log(dispatch);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nlet getCaptchaUrl = (): AuthThunkType => async (dispatch) => {\r\n    let data = await securityApi.getCaptchaUrl();\r\n    const captchaUrl = data.data.url;\r\n    dispatch(actions.setCaptchaUrl(captchaUrl));\r\n};\r\n\r\nlet authReducer = (\r\n    state = initialState,\r\n    action: ActionsTypes\r\n): initialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        case \"SET-CAPTCHA-URL\":\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setUserData: (\r\n        email: null | string,\r\n        login: string | null,\r\n        userId: number | null,\r\n        isAuth: boolean\r\n    ) =>\r\n        ({\r\n            type: \"auth/SET-USER-DATA\",\r\n            payload: { email, login, userId, isAuth },\r\n        } as const),\r\n    setCaptchaUrl: (captchaUrl: string) =>\r\n        ({\r\n            type: \"SET-CAPTCHA-URL\",\r\n            captchaUrl: captchaUrl,\r\n        } as const),\r\n};\r\n\r\nexport { authReducer, getAuthUserData, login, logout, getCaptchaUrl };\r\n\r\ntype initialStateType = {\r\n    userId: number | null;\r\n    email: string | null;\r\n    login: string | null;\r\n    isAuth: boolean;\r\n    captchaUrl: string | null;\r\n};\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype AuthThunkType = ThunkType<ActionsTypes | FormAction>;\r\n","function Preloader() {\r\n    return (\r\n        <div>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/b/b9/Youtube_loading_symbol_1_(wobbly).gif\"\r\n                alt=\"loading\"\r\n            ></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Preloader };\r\n","import { AppStateType } from \"./../redux-store\";\r\n\r\nconst selectIsAuth = (state: AppStateType) => state.auth.isAuth;\r\nconst selectCurrentUserLogin = (state: AppStateType) => state.auth.login;\r\nconst selectCaptchaUrl = (state: AppStateType) => state.auth.captchaUrl;\r\nexport { selectIsAuth, selectCurrentUserLogin, selectCaptchaUrl };\r\n"],"sourceRoot":""}